// Documentation Templates Module
class DocumentationTemplates {
    static generateReadme(metadata) {
        const timestamp = new Date().toLocaleDateString();
        
        return `# iOS Asset Bundle

**Generated:** ${timestamp}  
**Prompt:** "${metadata.prompt}"  
**Asset Types:** ${metadata.types.join(', ')}

## Overview

This bundle contains professionally generated iOS assets including app icons, UI elements, and supporting graphics. All assets follow Apple's Human Interface Guidelines and are optimized for iOS development.

## Quick Start

### 1. App Icons
- Navigate to \`images/app-icons/\`
- Choose between light-mode and dark-mode variants
- Drag the appropriate folder into your Xcode project
- Ensure "Copy items if needed" is selected

### 2. SVG Icons
- Find vector graphics in \`vectors/ui-icons/\`
- Use directly in your app or convert to PNG as needed
- All SVGs are optimized and iOS-compliant

### 3. Implementation
- See \`implementation-guide.md\` for detailed integration steps
- Check \`asset-manifest.json\` for complete asset inventory

## File Structure

\`\`\`
├── images/
│   ├── app-icons/
│   │   ├── light-mode/     # Light theme app icons (all sizes)
│   │   └── dark-mode/      # Dark theme app icons (all sizes)
│   └── launch-screens/     # Launch screen backgrounds
├── vectors/
│   ├── ui-icons/          # Interface icons (SVG)
│   └── themed/            # Theme-specific variations
└── documentation/         # Implementation guides
\`\`\`

## iOS Compliance

✅ All required app icon sizes (20pt to 1024pt)  
✅ Multiple density versions (@1x, @2x, @3x)  
✅ Light and dark mode support  
✅ Proper corner radius and visual effects  
✅ Optimized file sizes  

## Support

For implementation questions, refer to the documentation folder or Apple's Human Interface Guidelines.

---
*Generated by iOS Asset Generator*
`;
    }

    static generateManifest(bundle) {
        return {
            name: "iOS Asset Bundle",
            version: "1.0.0",
            generated: new Date().toISOString(),
            metadata: bundle.metadata,
            assets: {
                total: Object.values(bundle.assets).reduce((sum, assets) => sum + assets.length, 0),
                breakdown: Object.fromEntries(
                    Object.entries(bundle.assets).map(([type, assets]) => [type, assets.length])
                )
            },
            structure: {
                "images/app-icons/light-mode/": "App icons optimized for light theme",
                "images/app-icons/dark-mode/": "App icons optimized for dark theme", 
                "images/launch-screens/": "Launch screen backgrounds",
                "vectors/ui-icons/": "User interface icons (SVG)",
                "vectors/themed/": "Theme-specific icon variations",
                "documentation/": "Implementation guides and examples"
            },
            requirements: {
                ios: "13.0+",
                xcode: "12.0+",
                formats: ["PNG", "SVG"]
            },
            usage: {
                xcode: "Drag folders into Xcode project navigator",
                swift: "Reference images by filename in Image() or UIImage(named:)",
                swiftui: "Use Image() with asset names",
                uikit: "Use UIImage(named:) with asset names"
            }
        };
    }

    static generateImplementationGuide(bundle) {
        return `# Implementation Guide

## Xcode Integration

### Adding Assets to Your Project

1. **Open your Xcode project**
2. **Right-click on your project navigator**
3. **Select "Add Files to [ProjectName]"**
4. **Navigate to the extracted asset bundle**
5. **Select the \`images\` folder**
6. **Ensure "Copy items if needed" is checked**
7. **Click "Add"**

### App Icon Setup

1. **Open your project's Asset Catalog**
2. **Select the AppIcon asset**
3. **Drag the appropriate icon files from \`images/app-icons/light-mode/\` to the corresponding slots**
4. **For dark mode support:**
   - Enable "Supports Dark Appearance" in the AppIcon settings
   - Add dark mode variants from \`images/app-icons/dark-mode/\`

## SwiftUI Implementation

### Using App Icons
\`\`\`swift
// App icons are automatically used by the system
// No code implementation needed
\`\`\`

### Using UI Icons
\`\`\`swift
import SwiftUI

struct ContentView: View {
    var body: some View {
        VStack {
            // Using PNG assets
            Image("home-icon")
                .resizable()
                .frame(width: 24, height: 24)
            
            // Using SF Symbols (if available)
            Image(systemName: "house")
                .font(.title)
        }
    }
}
\`\`\`

### Using SVG Icons
\`\`\`swift
// Convert SVG to SwiftUI Path or use as Image
struct CustomIcon: View {
    var body: some View {
        // Load SVG content and render as Path
        // Implementation depends on your SVG loading library
    }
}
\`\`\`

## UIKit Implementation

### Using Images
\`\`\`swift
import UIKit

class ViewController: UIViewController {
    override func viewDidLoad() {
        super.viewDidLoad()
        
        // Load app icon programmatically
        let iconImage = UIImage(named: "AppIcon-60x60@2x")
        let imageView = UIImageView(image: iconImage)
        
        // Configure image view
        imageView.contentMode = .scaleAspectFit
        view.addSubview(imageView)
    }
}
\`\`\`

### Tab Bar Icons
\`\`\`swift
// In your tab bar controller setup
let homeTab = UITabBarItem(
    title: "Home",
    image: UIImage(named: "tab-bar-home"),
    selectedImage: UIImage(named: "tab-bar-home-selected")
)
\`\`\`

## Asset Naming Conventions

### App Icons
- \`AppIcon-{size}x{size}[@{density}x].png\`
- Example: \`AppIcon-60x60@2x.png\`

### UI Icons
- \`{name}-{variant}[@{density}x].png\`
- Example: \`home-icon@2x.png\`

### SVG Files
- \`{name}.svg\`
- Example: \`home-icon.svg\`

## Best Practices

### Performance
- Use appropriate image sizes for context
- Leverage @2x and @3x variants for crisp display
- Consider using SF Symbols for system consistency

### Accessibility
- Provide alternative text for images
- Ensure sufficient color contrast
- Test with VoiceOver enabled

### Dark Mode
- Use provided dark mode variants
- Test appearance in both light and dark themes
- Consider semantic colors for dynamic adaptation

## Troubleshooting

### Images Not Appearing
1. Verify files are added to project target
2. Check file names match code references
3. Ensure images are in the main bundle

### Blurry Icons
1. Use correct density variants (@2x, @3x)
2. Verify image dimensions match expected sizes
3. Check image scaling settings

### Dark Mode Issues
1. Ensure dark mode variants are properly configured
2. Test on device with dark mode enabled
3. Verify Asset Catalog settings

## File Size Optimization

The provided assets are already optimized, but you can further reduce size by:
- Removing unused density variants
- Converting to WebP format (iOS 14+)
- Using Asset Catalog compression

## Support

For additional help:
- Review Apple's Human Interface Guidelines
- Check Xcode documentation
- Test on multiple devices and iOS versions

---
*Generated by iOS Asset Generator*
`;
    }

    static generateUsageExamples() {
        return `# Usage Examples

## SwiftUI Examples

### Basic Image Usage
\`\`\`swift
Image("app-icon")
    .resizable()
    .aspectRatio(contentMode: .fit)
    .frame(width: 60, height: 60)
\`\`\`

### Themed Icons
\`\`\`swift
@Environment(\\.colorScheme) var colorScheme

var iconName: String {
    colorScheme == .dark ? "icon-dark" : "icon-light"
}

Image(iconName)
    .foregroundColor(.primary)
\`\`\`

## UIKit Examples

### Tab Bar Setup
\`\`\`swift
let tabBarController = UITabBarController()
let homeVC = HomeViewController()
homeVC.tabBarItem = UITabBarItem(
    title: "Home",
    image: UIImage(named: "home"),
    tag: 0
)
\`\`\`

### Navigation Bar Icons
\`\`\`swift
navigationItem.rightBarButtonItem = UIBarButtonItem(
    image: UIImage(named: "settings"),
    style: .plain,
    target: self,
    action: #selector(settingsTapped)
)
\`\`\`
`;
    }
}

// Export for use in other modules
if (typeof module !== 'undefined' && module.exports) {
    module.exports = DocumentationTemplates;
}

name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
      
      - name: Create image proxy server
        run: |
          mkdir -p api
          cat > api/proxy.js << 'EOF'
          const http = require('http');
          const https = require('https');
          const url = require('url');

          const server = http.createServer((req, res) => {
            // Enable CORS
            res.setHeader('Access-Control-Allow-Origin', '*');
            res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
            res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');
            
            if (req.method === 'OPTIONS') {
              res.writeHead(200);
              res.end();
              return;
            }
            
            if (req.method === 'POST' && req.url === '/proxy-image') {
              let body = '';
              req.on('data', chunk => body += chunk);
              req.on('end', () => {
                try {
                  const { imageUrl } = JSON.parse(body);
                  
                  https.get(imageUrl, (imageRes) => {
                    res.setHeader('Content-Type', imageRes.headers['content-type']);
                    imageRes.pipe(res);
                  }).on('error', (err) => {
                    res.writeHead(500);
                    res.end(JSON.stringify({ error: err.message }));
                  });
                } catch (err) {
                  res.writeHead(400);
                  res.end(JSON.stringify({ error: 'Invalid request' }));
                }
              });
            } else {
              res.writeHead(404);
              res.end('Not found');
            }
          });

          const port = process.env.PORT || 3000;
          server.listen(port, () => {
            console.log(`Proxy server running on port ${port}`);
          });
          EOF
      
      - name: Inject API Keys and create proxy endpoint
        run: |
          # Replace placeholders in config.js with actual secrets
          sed -i 's/openai: ""/openai: "${{ secrets.OPENAI_API_KEY }}"/g' js/config/config.js
          sed -i 's/elevenlabs: ""/elevenlabs: "${{ secrets.ELEVENLABS_API_KEY }}"/g' js/config/config.js
          
          # Create a simple proxy endpoint for images
          mkdir -p _functions
          cat > _functions/proxy-image.js << 'EOF'
          export default async function handler(request, context) {
            if (request.method !== 'POST') {
              return new Response('Method not allowed', { status: 405 });
            }
            
            try {
              const { imageUrl } = await request.json();
              
              const response = await fetch(imageUrl);
              if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
              }
              
              const imageBuffer = await response.arrayBuffer();
              
              return new Response(imageBuffer, {
                headers: {
                  'Content-Type': response.headers.get('content-type') || 'image/png',
                  'Access-Control-Allow-Origin': '*',
                  'Access-Control-Allow-Methods': 'POST, OPTIONS',
                  'Access-Control-Allow-Headers': 'Content-Type'
                }
              });
            } catch (error) {
              return new Response(JSON.stringify({ error: error.message }), {
                status: 500,
                headers: {
                  'Content-Type': 'application/json',
                  'Access-Control-Allow-Origin': '*'
                }
              });
            }
          }
          EOF
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
